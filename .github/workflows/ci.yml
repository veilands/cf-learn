name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci

    - name: Lint
      run: npm run lint

    - name: Increment version
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        npm run version:increment
        
    - name: Create wrangler.toml
      run: |
        cat > wrangler.toml << EOL
        name = "simple-backend"
        main = "src/index.ts"
        workers_dev = true
        compatibility_date = "2024-12-24"
        assets = { directory = "./public/" }

        [[routes]]
        pattern = "https://api.pasts.dev/*"
        zone_id = "${{ secrets.CF_ZONE_ID }}"

        [[kv_namespaces]]
        binding = "API_KEYS"
        id = "${{ secrets.CF_API_KEYS_ID }}"

        [[kv_namespaces]]
        binding = "METRICS"
        id = "${{ secrets.CF_METRICS_ID }}"

        [vars]
        INFLUXDB_URL = "${{ secrets.INFLUXDB_URL }}"
        INFLUXDB_ORG = "${{ secrets.INFLUXDB_ORG }}"
        INFLUXDB_BUCKET = "${{ secrets.INFLUXDB_BUCKET }}"
        EOL
    
    # Note: CF_API_TOKEN must have the following permissions:
    # - Account: Workers Scripts:Edit, Workers Routes:Edit, Workers KV Storage:Edit
    # - Zone: Zone Settings:Read, Workers Routes:Edit, All Zones:Edit
    - name: Deploy to Cloudflare Workers
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: npx wrangler deploy

    - name: Wait for deployment
      run: sleep 30
    
    - name: Test endpoints
      env:
        API_KEY: my_api_key_12345
        API_URL: https://api.pasts.dev
      run: |
        # Test health endpoint
        echo "Testing health endpoint..."
        health_response=$(curl -s -X GET "$API_URL/health" --max-time 10)
        if ! echo "$health_response" | grep -q '"status":"healthy"'; then
          echo "Health check failed"
          echo "Response: $health_response"
          exit 1
        fi

        # Test version endpoint
        echo "Testing version endpoint..."
        version_response=$(curl -s -X GET "$API_URL/version" -H "X-API-Key: $API_KEY" --max-time 10)
        if ! echo "$version_response" | grep -q '"version"'; then
          echo "Version check failed"
          echo "Response: $version_response"
          exit 1
        fi

        # Test time endpoint
        echo "Testing time endpoint..."
        time_response=$(curl -s -X GET "$API_URL/time" -H "X-API-Key: $API_KEY" --max-time 10)
        if ! echo "$time_response" | grep -q '"iso"'; then
          echo "Time check failed"
          echo "Response: $time_response"
          exit 1
        fi

        # Test metrics endpoint
        echo "Testing metrics endpoint..."
        metrics_response=$(curl -s -X GET "$API_URL/metrics" -H "X-API-Key: $API_KEY" --max-time 10)
        if ! echo "$metrics_response" | grep -q '"requestCount"'; then
          echo "Metrics check failed"
          echo "Response: $metrics_response"
          exit 1
        fi

        # Test measurement endpoint
        echo "Testing measurement endpoint..."
        measurement_response=$(curl -s -X POST "$API_URL/measurement" \
          -H "X-API-Key: $API_KEY" \
          -H "Content-Type: application/json" \
          --data '{
            "device": {
              "id": "test-device-1",
              "type": "temperature-sensor"
            },
            "readings": {
              "temperature": 22.5,
              "humidity": 45.2,
              "battery_voltage": 3.3
            },
            "metadata": {
              "location": "office"
            }
          }' \
          --max-time 10)
        if ! echo "$measurement_response" | grep -q '"success":true'; then
          echo "Measurement check failed"
          echo "Response: $measurement_response"
          exit 1
        fi

        # Test error cases
        echo "Testing error cases..."
        
        # Missing API key
        error_response=$(curl -s -X GET "$API_URL/metrics" --max-time 10)
        if ! echo "$error_response" | grep -q '"error":"Unauthorized"'; then
          echo "Error case (missing API key) check failed"
          echo "Response: $error_response"
          exit 1
        fi

        # Invalid API key
        error_response=$(curl -s -X GET "$API_URL/metrics" -H "X-API-Key: invalid_key" --max-time 10)
        if ! echo "$error_response" | grep -q '"error":"Unauthorized"'; then
          echo "Error case (invalid API key) check failed"
          echo "Response: $error_response"
          exit 1
        fi

        echo "All tests passed successfully!"

    - name: Push version update
      if: github.ref == 'refs/heads/main'
      run: |
        git push
